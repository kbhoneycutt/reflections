What happens when you initialize a repository? Why do you need to do it?

	using git init will create all the meta files and data necessary to track the files in the current directory in git.  It is necessary to do this as nothing will set up the directory to be tracked by git until this is done.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area holds files that have not yet been comitted to the repository, but whose work has presumably been finished.  The working directory holds files that are currently being worked on, files added to the staging area, and files that are also already in the repository.  

	The value in this is that the staging area can have files that you have finished, and are ready to send to the repository.  You could presumably work on those files more to experiment with a change you are about to commit.  If your experimentation fails, you could presumably remove that file from the staging area.  The staging area is also useful in that you know what you have finished working on and helps you keep track of what files needed to be committed.  When you finish working on a file, you simply add it to the staging area.

How can you use the staging area to make sure you have one commit per logical
change?

	You can add files to the staging area as you finish working on them for a particular logical change.  When you are finished with a particular change, you can then use git diff, with no arguments, to make sure that all files you modified for a particular change are included in the staging area for commit, thuse preventing a second commit to be necessary to pick up forgotten changes.  

	Likewise, you can make sure that no file that is NOT part of the logical change is in the staging area and about to be committed.  If so, then you can do a git reset <filename> to remove that file. 

	And finally, you can use git diff --staged to compare the staged files with the most recent commit, and visually scan for any possible changes that are not part of this logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be useful when you are trying something experimental, and you do not want to foul up the main baseline with the change.  Also, if you are thinking to make a new version with lots of significant changes, but you need to maintain an older version for support purposes (bug fixes, etc.) then the new version could be a branch, or the old version could be a branch off of the master.  Basically each version you release could be a branch, and then if bug fixes in an older version need to be made, the older branch could be checked out.
	
How do the diagrams help you visualize the branch structure?

	The diagrams show each commit as a node in the graph, and the parent of each commit.  The branches are shown as limbs that branch off of the main branch, and show the commits in that branch.  In using the graph like this, one is able to see if a particular commit can be reached from another commit, or in other words whether a commit is orphaned or lost.  The diagrams are basically a directed graph, or tree.  The diagrams also make it apparent where a merge may be needed.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When merging two branches, the source in one branch is merged with another branch, resulting in a single branch or baseline.  This new merge point is then a new commit for the branch being merged into.  It's represented this way in the diagram to signify that one branch moves into another one, and the merge point is a "commit" node in the branch merged into.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?